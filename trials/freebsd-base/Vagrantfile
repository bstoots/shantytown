# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

# Load user specific vars from vagrant_config.yml
current_dir    = File.dirname(File.expand_path(__FILE__))
config        = YAML.load_file("#{current_dir}/vagrant_config.yml")
vagrant_config = config['config']

Vagrant.configure(2) do |config|
  # arkadi/freebsd images comes with sane defaults
  config.vm.guest = :freebsd
  #config.vm.box = 'arkadi/freebsd-10.1-amd64'
  #config.vm.box_version = "1.0"
  config.vm.box = 'freebsd/FreeBSD-10.2-RELEASE'
  config.vm.box_version = "2015.08.13"
  # FreeBSD doesn't have fancy stuff like bash by default, kids these days
  config.ssh.shell = 'sh'
  config.vm.boot_timeout = 600
  # Set hostname and vagrant name
  config.vm.hostname = vagrant_config['hostname']
  config.vm.define vagrant_config['hostname'].to_sym do |name_config| end
  # Config private development network
  config.vm.network "private_network", type: "dhcp", auto_config: false
  # No shared folder.  We're going to treat this as a remote machine
  config.vm.synced_folder ".", "/vagrant", disabled: true
  # Virtualbox specific config
  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.memory = "2048"
    vb.name = vagrant_config['hostname']
  end
  # Screw all of these stupid DNS plugins that aren't cross-platform.
  # How about we just setup BIND and use nsupdate? Good idea?  Great idea.
  config.trigger.after :up do
    get_ip_address = %Q(vagrant ssh #{@machine.name} -c "ifconfig em1 | grep -oE 'inet \\b([0-9]{1,3}.){3}[0-9]{1,3}\\b' | grep -oE '\\b([0-9]{1,3}.){3}[0-9]{1,3}\\b'")
    @logger.debug "Running `#{get_ip_address}`"
    output = `#{get_ip_address}`
    @logger.debug "Output received:\n----\n#{output}\n----"
    puts "==> #{@machine.name}: Available on DHCP IP address #{output.strip}"
    @logger.debug "Finished running :after trigger"
    # @TODO: Here we do the platform specific nsupdate command
    run 'powershell -noprofile -Command ' + '& Write-Output \"update add ' + vagrant_config['hostname'] + ' 60 A ' + output.strip + ' `r`n send\" | nsupdate -v -k E:\\Users\\brian.stoots\\Klocalhost.+157+06519.key'
  end

  # Have to do this before otherwise we can't use vagrant ssh
  config.trigger.before :reload do
    get_ip_address = %Q(vagrant ssh #{@machine.name} -c "ifconfig em1 | grep -oE 'inet \\b([0-9]{1,3}.){3}[0-9]{1,3}\\b' | grep -oE '\\b([0-9]{1,3}.){3}[0-9]{1,3}\\b'")
    @logger.debug "Running `#{get_ip_address}`"
    output = `#{get_ip_address}`
    @logger.debug "Output received:\n----\n#{output}\n----"
    puts "==> #{@machine.name}: Available on DHCP IP address #{output.strip}"
    @logger.debug "Finished running :after trigger"
    # @TODO: Here we do the platform specific nsupdate command
    run 'powershell -noprofile -Command ' + '& Write-Output \"update add ' + vagrant_config['hostname'] + ' 60 A ' + output.strip + ' `r`n send\" | nsupdate -v -k E:\\Users\\brian.stoots\\Klocalhost.+157+06519.key'
  end

  config.trigger.after :destroy do
    # @TODO: Here we do the platform specific nsupdate command
    run 'powershell -noprofile -Command ' + '& Write-Output \"update delete ' + vagrant_config['hostname'] + ' A `r`n send\" | nsupdate -v -k E:\\Users\\brian.stoots\\Klocalhost.+157+06519.key'
  end
end
